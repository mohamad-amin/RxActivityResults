import java.text.SimpleDateFormat

apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'
apply plugin: "com.jfrog.artifactory"
apply plugin: 'net.nemerosa.versioning'

group = GROUP
version = VERSION_NAME
Date buildTimeAndDate = new Date()
def buildDate = new SimpleDateFormat('yyyy-MM-dd').format(buildTimeAndDate)
def buildTime = new SimpleDateFormat('HH:mm:ss.SSSZ').format(buildTimeAndDate)

def travisSlug = System.getenv("TRAVIS_REPO_SLUG")
def bintrayUser = ''
def bintrayKey = ''

if (travisSlug) {
    bintrayUser = System.getenv('BINTRAY_USERNAME')
    bintrayKey = System.getenv('BINTRAY_APIKEY')
} else if (project.rootProject.file('local.properties').exists()) {
    Properties prop = new Properties()
    prop.load(project.rootProject.file('local.properties').newDataInputStream())
    bintrayUser = prop.getProperty("user")
    bintrayKey = prop.getProperty("apiKey")
}

def pomConfig = {
    name POM_PROJECT_NAME
    description POM_DESCRIPTION
    url POM_URL
    inceptionYear POM_INTERCEPTION_YEAR
    licenses {
        license([:]) {
            name POM_LICENCE_NAME
            url POM_LICENCE_URL
            distribution POM_LICENCE_DIST
        }
    }
    scm {
        url POM_SCM_URL
    }
    developers {
        [
                mohamadamin: 'Mohamad Amin Mohamadi'
        ].each { devId, devName ->
            developer {
                id devId
                name devName
                roles {
                    role 'Developer'
                }
            }
        }
    }
    contributors {
        [
        ].each { cName ->
            contributor {
                name cName
                roles {
                    role 'contributor'
                }
            }
        }
    }
}

task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier "source"
}

publishing {
    publications {
        Production(MavenPublication) {

            groupId 'com.mohamadamin.rxactivityresults'
            artifactId 'rxactivityresults'
            version '0.1'
            artifact(sourceJar)
            artifact("$buildDir/outputs/aar/rxactivityresults-release.aar")

            //The publication doesn't know about our dependencies, so we have to manually add them to the pom
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.compile.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
                // all dependencies should use the default scope (compile) but
                // Gradle insists in using runtime as default
                asNode().dependencies.dependency.each { dep ->
                    if (dep.scope.text() == 'runtime') {
                        dep.remove(dep.scope)
                    }
                }
                asNode().children().last() + pomConfig
            }
        }
    }
}

bintray {
    // Get Bintray credential from environment variable
    user = bintrayUser // Get bintray User
    key = bintrayKey // Get bintray Secret Key
    publications = ['Production']
    publish = true
    pkg {
        repo = 'maven'
        name = 'rxactivityresults'
        userOrg = POM_DEVELOPER_ID
        licenses = [POM_LICENCE]
        desc = POM_DESCRIPTION
        websiteUrl = POM_URL
        vcsUrl = POM_URL + '.git'
        issueTrackerUrl = POM_URL + 'issues/'
        labels = ['android']
        publicDownloadNumbers = true
        githubRepo = POM_DEVELOPER_ID + '/' + POM_ARTIFACT_ID
        githubReleaseNotesFile = 'README.md'
        version {
            name = VERSION_NAME
            desc = DESC
            released = new Date()
        }
    }
}